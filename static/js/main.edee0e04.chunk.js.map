{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","option","key","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","res","json","data","console","log","firstCurrency","Object","keys","rates","base","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAEe,SAASA,EAAYC,GAAQ,IAEpCC,EAKAD,EALAC,gBACAC,EAIAF,EAJAE,iBACAC,EAGAH,EAHAG,iBACAC,EAEAJ,EAFAI,eACAC,EACAL,EADAK,OAEJ,OACI,6BACI,2BAAOC,KAAK,SAASC,UAAU,QAAQC,MAAOH,EAAQI,SAAUL,IAChE,4BAAQI,MAAON,EAAkBO,SAAUN,GACtCF,EAAgBS,KAAI,SAAAC,GAAM,OACvB,4BAAQC,IAAKD,EAAQH,MAAOG,GAASA,QCXzD,IAAME,EAAW,yCAwEFC,MAtEf,WAAgB,IAQVC,EAAUC,EARD,EACiCC,mBAAS,IAD1C,mBACNhB,EADM,KACWiB,EADX,OAE2BD,qBAF3B,mBAENE,EAFM,KAEQC,EAFR,OAGuBH,qBAHvB,mBAGNI,EAHM,KAGMC,EAHN,OAI2BL,qBAJ3B,mBAINM,EAJM,KAIQC,EAJR,OAKeP,mBAAS,GALxB,mBAKNZ,EALM,KAKEoB,EALF,OAM2CR,oBAAS,GANpD,mBAMNS,EANM,KAMgBC,EANhB,KAgDb,OAvCID,GACFV,EAAaX,EACbU,EAAWV,EAASkB,IAEpBR,EAAWV,EACXW,EAAaX,EAASkB,GAGxBK,qBAAU,WACRC,MAAMhB,GACHiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,IAAMG,EAAgBC,OAAOC,KAAKL,EAAKM,OAAO,GAC9CrB,EAAmB,CAACe,EAAKO,MAAP,mBAAgBH,OAAOC,KAAKL,EAAKM,UACnDnB,EAAgBa,EAAKO,MACrBlB,EAAcc,GACdZ,EAAgBS,EAAKM,MAAMH,SAE9B,IAEHR,qBAAU,WACY,MAAhBT,GAAsC,MAAdE,GAC1BQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IAC/CS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKM,MAAMlB,SAE5C,CAACF,EAAcE,IAahB,oCACE,uCACA,kBAACtB,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkBiB,EAClBhB,iBAAkB,SAAAsC,GAAC,OAAIrB,EAAgBqB,EAAEC,OAAOlC,QAChDJ,eAjBN,SAAgCqC,GAC9BhB,EAAUgB,EAAEC,OAAOlC,OACnBmB,GAAwB,IAgBpBtB,OAAQW,IAEV,yBAAKT,UAAU,UAAf,KACA,kBAACR,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkBmB,EAClBlB,iBAAkB,SAAAsC,GAAC,OAAInB,EAAcmB,EAAEC,OAAOlC,QAC9CJ,eApBN,SAA8BqC,GAC5BhB,EAAUgB,EAAEC,OAAOlC,OACnBmB,GAAwB,IAmBpBtB,OAAQU,MClEhB4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.edee0e04.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function CurrencyRow(props) { \n    const { \n        currencyOptions,\n        selectedCurrency,\n        onChangeCurrency, \n        onChangeAmount, \n        amount\n    } = props\n    return ( \n        <div> \n            <input type=\"number\" className=\"input\" value={amount} onChange={onChangeAmount} />\n            <select value={selectedCurrency} onChange={onChangeCurrency}> \n                {currencyOptions.map(option => ( \n                    <option key={option} value={option}>{option}</option> \n                ))} \n            </select> \n        </div>\n    ) \n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CurrencyRow from './CurrencyRow'\n\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([]) \n  const [fromCurrency, setFromCurrency] = useState()\n  const [toCurrency, setToCurrency] = useState()\n  const [exchangeRate, setExchangeRate] = useState()\n  const [amount, setAmount] = useState(1) \n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true) \n\n  let toAmount, fromAmount \n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  useEffect(() => { \n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => { \n        console.log(data)\n        const firstCurrency = Object.keys(data.rates)[0]\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, []) \n\n  useEffect(() => { \n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) { \n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n\n  return ( \n    <> \n      <h1>Convert</h1>\n      <CurrencyRow \n        currencyOptions={currencyOptions} \n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n      <div className=\"equals\">=</div>\n      <CurrencyRow \n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)} \n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n    </>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}